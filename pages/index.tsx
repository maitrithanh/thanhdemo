import Head from 'next/head'
import Image from 'next/image'
import Layout from '../components/layout'
import Modal from '../components/modal'
import { Inter } from 'next/font/google'
import styles from '../styles/Home.module.css'
import { useState } from 'react'
import {useCollection} from 'react-firebase-hooks/firestore'
import JobApplyList from '../components/JobApplyList'
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import Loading from '../components/loading'
import {
  faSearch,
  faPlus,
  faAnchor,
} from "@fortawesome/free-solid-svg-icons";
import { useAuthState } from 'react-firebase-hooks/auth'
import { auth, db } from '../config/firebase'
import { addDoc, collection, doc, getDocs, query, where } from 'firebase/firestore'
import { getAuth } from 'firebase/auth'

const inter = Inter({ subsets: ['latin'] })

type Data = {
  data: any;
}

export default function Home({data}:Data) {
  // async function dataa() {
  //   const dataTest = query(collection(db, 'jobapplys'), where('user', '==', "trangmbplus@gmail.com"));
  //   try {
  //     const docsSnap = await getDocs(dataTest);
  //     docsSnap.forEach(doc => {
  //       console.log(doc.data())
  //     })
  //   } catch (error) {
  //       console.log(error);
  //     }
  // }
  const [loggedInUser, loading, _error] = useAuthState(auth);
  
  const [recipienCompanyName, setRecipienCompanyName] = useState('');

  const [recipienSalary, setRecipienSalary] = useState('');

  const [recipienPosition, setRecipienPosition] = useState('');

  const [recipienLocation, setRecipienLocation] = useState('');

  const [recipienDescription, setRecipienDescription] = useState('');

  const [recipienSkill, setRecipienSkill] = useState('');
  
  
  // lay danh sach cong viec ung tuyen da them theo email
  const queryGetJobApply = query(collection(db, 'jobapplys'), where('user', '==', loggedInUser?.email));
  const [jobApplysSnapShot, __loading, __error] = useCollection(queryGetJobApply);

  //kiem tra xem da co cong viec nao da them chua
  const isNullJobApply = () => 
    jobApplysSnapShot?.docs.find(jobapply => (jobapply.data()).company);
  //ham them cong viec da ung tuyen moi vao db
  const createNoteApplyJob = async () => { 
    if(!recipienCompanyName) return

    await addDoc(collection(db, 'jobapplys'), {
      user: loggedInUser?.email,
      company: recipienCompanyName,
      salary: recipienSalary,
      position: recipienPosition,
      location: recipienLocation,
      description: recipienDescription,
      skill: recipienSkill
    })
    ToggleShow();
  }

  if(loading) return <Loading />

  return (
    <Layout current="home">
      <Head>
        <title>TJob</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <button className= {`bg-blue-700 ${styles.buttonAdd} flex text-white font-bold py-2 px-4 rounded-full`} onClick={ToggleShow}>
        <FontAwesomeIcon
          icon={faPlus}
          style={{ fontSize: 34, color: "white" }}
        />
        </button>
        <Modal id="input">
          <form className="w-full max-w-3xl mx-auto">
          <div className="flex flex-wrap -mx-3 mb-6">
              <div className="w-full px-3">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Company Name
                </label>
                <input 
                  className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" 
                  type="text" 
                  value={recipienCompanyName}
                  onChange={event => {
                    setRecipienCompanyName(event.target.value)
                  }}
                  placeholder="Your name company apply" />
              </div>
            </div>

            <div className="flex flex-wrap -mx-3 mb-6">
              <div className="w-full px-3">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Description
                </label>
                <input 
                  className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" 
                  id="grid-password" 
                  type="text" 
                  value={recipienDescription}
                  onChange={event => {
                    setRecipienDescription(event.target.value)
                  }}
                  placeholder="Note" />
              </div>
            </div>
            <div className="flex flex-wrap -mx-3 mb-6">
              <div className="w-full px-3">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Skill
                </label>
                <div className="relative">
                  <input 
                    className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" 
                    id="grid-skill" 
                    type="text" 
                    value={recipienSkill}
                    onChange={event => {
                      setRecipienSkill(event.target.value)
                    }}
                    placeholder="NextJS, ReactJS, JavaScript" 
                  />
                </div>
              </div>
            </div>

            <div className="flex flex-wrap -mx-3 mb-2">
              <div className="w-full md:w-1/3 px-3 mb-6 md:mb-0">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Location
                </label>
                <input 
                  className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" 
                  id="grid-city" 
                  type="text" 
                  value={recipienLocation}
                  onChange={event => {
                    setRecipienLocation(event.target.value)
                  }}
                  placeholder="Ho Chi Minh" />
              </div>
              <div className="w-full md:w-1/3 px-3 mb-6 md:mb-0">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Position
                </label>
                <div className="relative">
                  {/* <select className="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="grid-state">
                    <option>Leader</option>
                    <option>AI</option>
                    <option>Front-End</option>
                    <option>Back-End</option>
                  </select> */}
                  <input 
                    className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" 
                    id="grid-position" 
                    type="text" 
                    value={recipienPosition}
                    onChange={event => {
                      setRecipienPosition(event.target.value)
                    }}
                    placeholder="Leader" 
                  />
                  {/* <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                    <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
                  </div> */}
                </div>
              </div>
              <div className="w-full md:w-1/3 px-3 mb-6 md:mb-0">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Salary
                </label>
                <input 
                  className="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" 
                  id="grid-salary" 
                  type="text" 
                  placeholder="100000" 
                  value={recipienSalary}
                  onChange={event => {setRecipienSalary(event.target.value)}}
                />
              </div>
            </div>
            <div className="flex flex-wrap -mx-3">
              <div className="w-full px-3">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Image
                </label>
                <div className='flex items-center justify-center border-2 border-dashed rounded-xl'>
                  <Image 
                    priority
                    src="/images/noimage.png"
                    width={108}
                    height={108}
                    alt=''
                  />
                  <input className="" id="grid-password" type="file" placeholder="Salary" />
                </div>
              </div>
            </div>
            <button disabled={!recipienCompanyName} onClick={createNoteApplyJob} className= {`bg-blue-700 w-full text-white font-bold py-2 px-4 mt-4 rounded-lg`}>
              Save
            </button>
          </form>
        </Modal>
        <div>
    </div>
        {/* render cong viec ung tuyen da them vao */}
        <section className={`flex flex-wrap justify-center`}>
          {data.length != 0? 
            (data.map((jobapply:any) => (
              <div key={jobapply.id}>
                <JobApplyList 
                  id= {jobapply.id}
                  user = {jobapply.user}
                  jobapplyCompany= {jobapply.company}
                  jobapplySalary={jobapply.salary}
                  jobapplyPosition={jobapply.position}
                  jobapplyLocation={jobapply.location}
                  jobapplyDescription={jobapply.description}
                  jobapplySkill={jobapply.skill}
                />            
            </div>              
            )))
             : 
            (<>
              <div className=''>
                <Image priority src="/images/freetime.gif" width={800} height={800} alt=''/>
              </div>
            </>)}
        </section>
      </main>
    </Layout>
  )
  function ToggleShow() {
    let modal = document.getElementById("input");
    modal?.classList.toggle("hidden")
  }
}

// var mail = "maitrithanh06@gmail.com"
export async function getServerSideProps() {
  const userID = auth.currentUser?.email ?? "";
  // , where("user", "==", userID) 
  console.log("UserID: ",userID);
  const dataCloud = query(collection(db, "jobapplys"));
  var data;
  try {
    const docsSnap = await getDocs(dataCloud);
    data = docsSnap.docs.map((doc) => (doc.data()));
    // console.log(data);
  } catch (error) {
    console.log(error);
  }
  return { props: { data } };
}

